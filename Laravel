// upload file
     $imageName = time().'.'.$request->image->extension();
     $product->image = $imageName;
     $request->image->move(public_path('/uploads/products/'), $imageName);
// upload file
// delete single file
     $image_path = public_path("uploads/products/$product->image");  // Value is not URL but directory file path
     if(File::exists($image_path)) {
         File::delete($image_path);
            }
// delete single image

{{--                            <?php $imgs = json_decode($product->image)  ?>--}}
{{--                            @foreach($imgs as $img)--}}
{{--                            <img width="20%" src="{{ asset('uploads/products/').'/'.$img }}">--}}
{{--                            @endforeach--}}
-------------------------------------------------------


// uploade multi file
$data = [];
    if ($request->hasFile('image')) {
    $images = $request->file('image');
       foreach ($images as $image) {
             $name=time() . rand(1,1000) .'.'. $image->extension();
              $image->move(public_path().'/uploads/products/', $name);
              $data[] = $name;
           }
           $product->image=json_encode($data);
        }
// /uploade multi file

// delete multi file
$images = explode(",",  $item->image);
                    foreach($images as $image){
                    $image_path = public_path().'/images/'.$image;
                    if(File::exists($image_path)) {
//                            File::delete($image_path);
                     unlink("uploads/restorants/" . $image_path);
                        }   
                    }
// /delete multi file
-------------------------------------------------------

// delete row with image
$photos = RestaurantBanner::findOrFail($id);
        $image_path = public_path().'/uploads/restaurants-banners/'.$photos->filename;
        if(File::exists($image_path)) {
            unlink( $image_path);
        }
        $photos->delete();
// /delete row with image

// return multi id
$ss = DB::table('order_has_status')->where('status_id', '=',7)->get();
            $json = $ss;
            $json_toArray = json_decode($json,true);
            $array_ids = array_column($json_toArray, 'id');
            return $array_ids;
            
            $result = \App\Order::whereIn('id', $array_ids)->get();
// /return multi id


// COMPAR 2 ARRAYS
array_intersect($a2,$re_ids);

// /COMPAR 2 ARRAYS
